#+SETUPFILE: ~/site/tpl/wiki-tpl.org
#+TITLE: Kubernetes 对象
#+DATE: 2020-02-05 12:25:24

* 字段选择器

字段选择器允许用户根据一个或者多个资源字段值筛选资源。比如 ~metadata.name=my-service~ ， ~status.phase=Pending~ 。

=kubectl= 命令通过 =--field-selector= 筛选资源，比如：

#+BEGIN_SRC shell
kubectl get pods --field-selector status.phase=Running
#+END_SRC

** 支持的字段

不同的资源类型（deployment，pod 等）支持不同的字段选择器，所有的资源都支持 =metadata.name= 和  =metadata.namespace= 。

** 支持的运算符

- 相等： ~=~ 和 ~==~ /两者意义相同/
- 不相等： ~!=~

** 链式选择器

通过逗号分隔组成一个选择链，逗号表示 /与/ 。

** 多种资源类型

多种资源类型中逗号分隔，可以 /同时/ 筛选。比如：

#+BEGIN_SRC shell
kubectl get statefulsets,services --all-namespaces --field-selector metadata.namespace!=default
#+END_SRC

* 推荐使用的标签

https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/common-labels/

范例：

#+BEGIN_SRC yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: wordpress-abcxzy
    app.kubernetes.io/version: "5.7.21"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: wordpress
    app.kubernetes.io/managed-by: helm
#+END_SRC

** 一个简单的无状态服务

*Deployment*

#+BEGIN_SRC yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: myservice
    app.kubernetes.io/instance: myservice-abcxzy
...
#+END_SRC


*Service*

#+BEGIN_SRC yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: myservice
    app.kubernetes.io/instance: myservice-abcxzy
...
#+END_SRC

** 有状态服务

*StatefulSet*

#+BEGIN_SRC yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: mysql-abcxzy
    app.kubernetes.io/version: "5.7.21"
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: wordpress
...
#+END_SRC

*Service*

#+BEGIN_SRC yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: mysql-abcxzy
    app.kubernetes.io/version: "5.7.21"
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: wordpress
...
#+END_SRC
* 理解 Kubernetes 对象

Kubernetes 使用 /对象/ 来表示整个集群的状态。它们描述了：

- 哪些容器化应用在运行（以及在哪个 Node 上）
- 可以被应用使用的资源
- 关于应用运行时表现的策略，比如重启策略、升级策略，以及容错策略

没创建一个对象，本质上是告知 Kubernetes 系统，所需要的集群工作负载看起来是什么样的，这就是集群的 *期望状态（Desired State）* 。

/理解上面这一点很重要。/

Kubernetes 对象的操作（CRUD） 都需要使用 Kubernetes API。kubectl 其实也是将 API 的一层封装成了 CLI 工具；同样，用户可以通过客户端库调用 API。

** 对象规约（Spec）和状态（Status）

每个 Kubernetes 对象包含两个嵌套的字段，它们负责管理对象的配置：一个是对象 Spec；一个是 Status；

- Spec 是必须的，用来描述对象的 /期望状态（Desired State）/
- Status 是可选的，它描述对象的 /实际状态（Actual State）/ ，它由 Kubernetes 系统提供和更新

*在任何时刻，Kubernetes 都一直努力的实现 Spec 和 Status 相匹配。

** 描述 Kubernetes 对象

创建 Kubernetes 对象时，必须提供对象的 Spec，描述对象的期望状态，以及关于对象的一些基本信息（名称，空间等）。
API 请求必须在 body 中包含 JSON 信息。kubectl 使用 yaml 格式，发起请求时，将这些信息转换成 JSON。比如：

#+BEGIN_SRC yaml
application/deployment.yaml

apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
#+END_SRC

** 必须字段

创建 Kubernetes 对象中对应的 .yaml 文件，需要配置如下字段：

- =apiVersion= 创建该对象所使用的 Kubernetes API 版本
- =kind= 想要创建的对象类型
- =metadata= 帮助识别对象唯一性的数据，包括 =name= 、UID 和可选的 =namespace= 。
- =spec= 不同的 Kubernetes 对象 spec 格式不同
