#+SETUPFILE: ~/site/tpl/wiki-tpl.org
#+TITLE: Kubernetes Labels 和 Selectors
#+DATE: 2020-02-05 12:25:24

以下将 Label 翻译成标签，Selector 翻译成选择器。

/标签/ 是附加到 Kubernetes 对象（比如 Pods）上的键值对。

- 标签的含义由用户定义；
- 可以用来组织和选择对象的子集；
- 标签在创建时附加到对象，然后可以随时添加和修改；
- 每个对象都可以定义一组键/值标签，键不可重复；

#+BEGIN_SRC js
  "metadata": {
    "labels": {
      "key1" : "value1",
      "key2" : "value2"
    }
  }
#+END_SRC

标签会被设置成索引，以提高查询效率和监控，非常適合在 UIs 和 CLIs 中使用。
如果是非标识性的，尤其是大型的结构化数据应该使用[[https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/][注解]]来记录，而不是标签。

* 动机

  标签使用户能够以松散耦合的方式将他们自己的组织结构映射到系统对象，而无需客户端存储这些映射。

  其实就是一个轻量级的标识，用于多纬度的管理（查询），具体含义由用户约定。标签举例：

  - ="release": "stable"= , ="release" : "canary"=
  - ="environment" : "dev"= , ="environment" : "qa"= , ="environment" : "production"=
  - ="tier" : "frontend"= , ="tier" : "backend"= , ="tier" : "cache"=
  - ="partition" : "customerA"= , ="partition" : "customerB"=
  - ="track" : "daily"= , ="track" : "weekly"=

  这些是常用的标签，你可以自己约定规范。只要留意，标签键必须是要唯一的。

* 语法和字符集

  /键值对。/

  - 键，可选的前缀和名称，用斜杠（ =/= ）分隔，。
    + 名称是必须的，以字母数字字符 =[a-z0-9A-Z]= 开头和结尾，中间包含 =-= =_= =.= 和 =[a-z0-9A-Z]=
    + 前缀是可选的，如果指定必须是 DNS 子域：点（ =.= ）分隔的一系列 DNS 标签，总共不超过 253 个字符，后跟斜杠（ =/= ）
  - 值，小于 64 字符， =[a-z0-9A-Z]= 开头和结尾，中间包含 =-= =_= =.= 和 =[a-z0-9A-Z]=

  /键/ 如果省略前缀，则假定是对用户是私有的。
  自动化的系统组件（ =kube-scheduler= ， =kube-controller-manager= , =kube-apiserver=, =kubectl= 等，或者第三方自动化）必须指定前缀。

  =kubernetes.io/= 和 =k8s.io/= 前缀是为 Kubernetes 核心组件保留的。

  有效的标签不得超过 63 个字符，并且必须为空或者字母数字字符（ =[a-z0-9A-Z]= ）开头和结尾，中间可带有破折号，下划线或者点。

  比如，下面的配置文件带有两个标签： =environment: production= 和 =app: nginx= :

  #+begin_src yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: label-demo
      labels:
        environment: production
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
  #+end_src

* TODO 标签选择器

  通过标签选择器，用户可以识别一组对象。API 目前支持两种类型的选择器：

  1) 基于相等性的
  2) 基于集合的

  标签选择器可以有逗号分隔的多个 /需求/ 组成。在多个需求的情况下，必须满足所有的要求，因为逗号分隔符充当的是逻辑 /与/ 运算符。

  *基于相等性的需求*

  一种使用场景是 Pods 要指定节点选择标准。

  *基于集合的需求*

* TODO API
